#Imported list of libraries
from flask import Flask, render_template, request
import subprocess
import requests
from bs4 import BeautifulSoup
from zapv2 import ZAPv2
from flask_socketio import SocketIO, emit
import threading
import time

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app)

#Details for the zap configuration (apikey)
zap = ZAPv2(apikey='l73o83f5blqt2k546rqbj19cvc', proxies={'http':'http://localhost:8080/', 'https': 'http://localhost:8080/' })

@app.route('/')
def index():
    return render_template('index.html', body_class='home-page')
 
@app.route('/xss', methods=['GET', 'POST'])
def xss():
    result = ""
    if request.method == 'POST':
        target = request.form['target']
        result = xss_scan(target)
    return render_template('xss.html', result=result, body_class='xss-page')
    
@app.route('/sql_injection', methods=['GET','POST'])
def sql_injection():
    result = ""
    if request.method == 'POST':
        target = request.form['target']
        result = subprocess.getoutput(f"sqlmap -u {target} --batch")
    return render_template('sql_injection.html', result=result, body_class='sql-page')

@app.route('/nmap', methods=['GET', 'POST'])
def nmap():
    result = ""
    if request.method == 'POST':
        target = request.form['target']
        result = subprocess.getoutput(f"nmap {target}")
    return render_template('nmap.html', result=result, body_class='nmap-page')

@app.route('/zap_scan', methods=['GET', 'POST'])
def zap_scan_route():
    return render_template('zap_scan.html', body_class='zap-page')

@socketio.on('start_scan')
def handle_start_scan(data):
    target = data['target']
    thread = threading.Thread(target=zap_scan, args=(target,))
    thread.start()
    emit('scan_started',{'message': 'Scan started for ' + target})

def xss_scan(target):
    payloads = [
        "<script>alert('XSS')</script>",
        "<img src=x onerror=alert('XSS')>",
    ]
    
    proxies ={
        'http': 'http://localhost:8080',
        'https': 'http://localhost:8080'
    }
    
    requests.packages.urllib3.disable_warnings()
    
    try:
        for payload in payloads:
            print(f"Trying Payload: {payload}")
            response = requests.get(target, params={"q": payload}, proxies=proxies, verify=False, timeout=10)
            print(f"Status Code: {response.status_code}")
            print(f"Response Text: {response.text[:500]}")
            
            if payload in response.text:
                return f"XSS vulnerability has been found! Payload: {payload}"
            
        return "No Cross Site Scripting detected"
    except requests.RequestException as e:
        print(f"Error with the scan: {str(e)}")
        return f"Error scanning target: {str(e)}"
    
def zap_scan(target):
    proxies = {
        'http': 'http://localhost:8080',
        'https': 'http://localhost:8080'
    }

    # Disable SSL verification warning
    requests.packages.urllib3.disable_warnings()

    try:
        zap.urlopen(target)
        scan_id = zap.ascan.scan(target)
        
        print(f"Initiated scan with ID: {scan_id}")

        # To check and see if the scan ID is valid
        if scan_id == 'does_not_exist':
            print("Scan initiation failed: Invalid scan ID returned.")
            socketio.emit('scan_error', {'error': 'Scan initiation failed: Invalid scan ID returned.'})
            return

        while True:
            status = zap.ascan.status(scan_id)
            print(f"Current scan status: {status}")

            # Had to change the status to integer to fix connection error
            try:
                status_int = int(status)
                if status_int >= 100:
                    break
                socketio.emit('scan_progress', {'progress': status_int})
            except ValueError:
                print(f"Received invalid scan status: {status}")
                socketio.emit('scan_error', {'error': f"Invalid scan status: {status}"})
                return

            time.sleep(5)

        alerts = zap.core.alerts(baseurl=target)
        print(f"Scan complete. Alerts: {alerts}")
        socketio.emit('scan_complete', {'alerts': alerts})

    except Exception as e:
        print(f"Error during scan: {str(e)}")
        socketio.emit('scan_error', {'error': str(e)})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
        